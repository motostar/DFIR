#############################################################################################################################
# nginx.conf
#
#  .SYNOPSIS
#     Logstash config file for parsing Nginx logs
#
#  .DESCRIPTION
#.      This logstash configuration file helps to parse Nginx default combined log_format 
#       log_format combined '$remote_addr - $remote_user [$time_local] '
#                   '"$request" $status $body_bytes_sent '
#                   '"$http_referer" "$http_user_agent"'; 
#
#  .PREREQUISITES
#       1. nginx logs in above mentioned format
#       2. Connectivity to ES to ingest data from this parser
#
#   .Patterns
#       1. %{IPORHOST:remote_ip} - %{DATA:user_name} \[%{HTTPDATE:time}\] "%{WORD:request_action} %{DATA:request} 
#          HTTP/%{NUMBER:http_version}" %{NUMBER:response} %{NUMBER:bytes} "%{DATA:referrer}" "%{DATA:agent}" 
#
#       2. %{IPORHOST:clientip} %{USER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] "%{WORD:method} 
#          %{URIPATHPARAM:request} HTTP/%{NUMBER:httpversion}" %{INT:response} %{INT:bytes} %{QS:referrer} %{QS:agent}
#
#       3. %{IPORHOST:clientip} %{USER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] "%{WORD:method} %{URIPATHPARAM:request} %{GREEDYDATA:uri}" %{INT:response} %{INT:bytes} "%{GREEDYDATA:referrer}" "%{GREEDYDATA:useragent}"
#
#       3rd format can be used in case malicious strings are parsed in useragent and referer fields, other 2 grok patterns may fail in such cases. 3rd one uses greedy approach to parse all input types
#
#   .NOTES
#.      Author: Balasubramanya Chandrashekar
#       Date: 2023-01-10
#       Version: 1.0
############################################################################################################################

input {
  file{
    path => "/path/to/Nginx/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
  }
}

filter {
  grok {
    match => {
      "message" => '%{IPORHOST:clientip} %{USER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] "%{WORD:method} %{URIPATHPARAM:request} %{GREEDYDATA:uri}" %{INT:response} %{INT:bytes} "%{GREEDYDATA:referrer}" "%{GREEDYDATA:useragent}"'
    }
  }
  date {
    match => [ "time", "dd/MMM/YYYY:HH:mm:ss Z" ]
    locale => en
  }
  geoip {
    source => "clientip"
    target => "geoip"
  }
  useragent {
    source => "agent"
    target => "user_agent"
  }
  ############ this block will restrict IP lookup only for public IP ranges
  if [clientip] !~ "^(10\.|172\.(1[6-9]|2[0-9]|3[01])\.|192\.168\.)" {
    http { 
      url => "https://otx.alienvault.com/api/v1/indicators/IPv4/%{clientip}/"
      headers => {
       "X-OTX-API-KEY" => "<API Key>"
      }
      target_body => "[ipreputation]"
    }
  }
} 

output {
  elasticsearch{
    hosts => "ES url"
    ssl => "false"
    ssl_certificate_verification => "false"
    user => "<user>"
    password => "<password>"
    index => logs
  }
  stdout {}
}
